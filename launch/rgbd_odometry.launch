<?xml version="1.0" encoding="UTF-8"?>
<!-- Tools to change and view node example output. -->
<launch>

    <arg name="run_rviz" default="false"/>
    <arg name="rviz_config" default="uncc_rgbd_odom.rviz"/>
    <arg name="run_rgbd_odometry_node" default="true"/>
    <arg name="run_odometry_analysis_node" default="false"/>

    <!-- namespace for the camera -->
    <arg name="camera" default="camera" />

    <!-- Setup coordinate TF frame structure is:
    map_frame -> initial_body_frame -> initial_optical_frame -> vo_frame -->
    <arg name="map_frame" default="optitrack" />
    <arg name="initial_body_frame" default="initial_body_frame" />
    <arg name="initial_optical_frame" default="initial_optical_frame" />
    <arg name="vo_frame" default="vo_frame" />

    <arg name="sensor_type_sr4000" default="false" />
    <arg name="sensor_type_ds325" default="false" />
    <arg name="sensor_type_astra" default="false" />
    <arg name="sensor_type_xtion" default="true" />
    <arg name="sensor_type_kinect_xbox360" default="false" />
    <arg name="sensor_type_kinect_xboxOne" default="false" />

    <!-- parameters for real-time rviz visualization -->
    <group if="$(arg sensor_type_xtion)">
        <include if="true"
                 file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name" value="$(arg camera)_nodelet_manager" />
            <arg name="debug" value="false" />
            <arg name="num_worker_threads"  value="4" />
        </include>
        <remap from="rgb/camera_info" to="rgb/camera_info"/>
        <remap from="rgb/image_raw" to="rgb/input_image"/>
        <remap from="depth_registered/image_raw" to="depth_registered/input_image"/>
        <include if="$(arg sensor_type_xtion)" file="$(find openni2_launch)/launch/openni2.launch"/>
    </group>

    <group if="$(arg sensor_type_astra)">
        <!-- <remap from="/camera/rgb/image_raw" to="/camera/rgb/input_image"/> -->
        <remap from="depth_registered/image_raw" to="depth_registered/input_image"/>
        <include if="true"
                 file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name" value="$(arg camera)_nodelet_manager" />
            <arg name="debug" value="false" />
            <arg name="num_worker_threads"  value="4" />
        </include>

        <include if="$(arg sensor_type_astra)" file="$(find astra_launch)/launch/astra_pro.launch">
        </include>

    </group>

    <group ns="$(arg camera)">
        <node name="uncc_rgbd_odom" pkg="uncc_rgbd_odom"
              type="uncc_rgbd_odom" output="screen" if="$(arg run_rgbd_odometry_node)">
            <!-- <remap from="rgb/camera_info" to="rgb/camera_info"/>
            <remap from="rgb/input_image" to="rgb/image_raw"/>
            <remap from="depth_registered/input_image" to="depth_registered/image_raw"/> -->
            <param name="optical_parent" value = "$(arg initial_optical_frame)"/>
            <param name="optical_frame" value = "$(arg vo_frame)"/>

            <param name="tf_truth_initialize"  value = "false"/>
            <param name="tf_truth_topic"       value = ""/>
            <param name="tf_truth_init_time"   value = "0"/>
            <param name="calibration_pose"     value = ""/>
            <!-- valid depth_processing values are "moving_average", "dither", "none" -->
            <!-- <param name="depth_processing"     value = "dither"/> -->
            <param name="depth_processing"     value = "none"/>
            <!-- Detectors/Descriptors: ORB, SIFT, SURF, BRISK -->
            <!-- Detector-only algorithms: FAST, GFTT -->
            <param name="feature_detector"     value = "ORB"/>
            <!-- Detectors/Descriptors: ORB, SIFT, SURF, BRISK -->
            <!-- Descriptor-only algorithms: BRIEF -->
            <param name="feature_descriptor"   value = "ORB"/>
        </node>
    </group>

    <node pkg="rviz" type="rviz" name="rviz" output="screen"
          args="-d $(find uncc_rgbd_odom)/rviz/$(arg rviz_config)" if="$(arg run_rviz)"/>

    <node name="map_to_base" pkg="tf" type="static_transform_publisher"
          args="0.0 0.0 1.5 0 0 0 1 $(arg map_frame) $(arg initial_body_frame) 100" />

    <node name="base_to_optical" pkg="tf" type="static_transform_publisher"
          args="0.0 0.0 0.0  -0.5 0.5 -0.5 0.5 $(arg initial_body_frame) $(arg initial_optical_frame) 100" />

</launch>
